skok <- T/(liczba.rehedg+1)
strata <- 0
for(i in 1:(liczba.rehedg)){
s <- fun.symuluj.1dim.1skok(skok, s, mean, sd, rnorm(1))
new.delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, i*skok))
norisk <- norisk*exp(r*skok) - (new.delta-delta)*s
delta <- new.delta
portfel <- rbind(portfel, c(s, delta, norisk))
}
s <- fun.symuluj.1dim.1skok(skok, s, mean, sd, rnorm(1))
strata <- -(delta*s + norisk*exp(r*skok) - (s-strike))
return (strata)
}
dane.liczba.rehedg <- c(4,10)
dane.liczba.iteracji <- 6
dane.part.A.abstract <- sapply(dane.liczba.rehedg,
fun.apply.for.loss,
liczba.iteracji = dane.liczba.iteracji)
dane.part.A.abstract
dane.liczba.rehedg <- c(1, 4,10, 40)
dane.liczba.iteracji <- 20
dane.part.A.abstract <- sapply(dane.liczba.rehedg,
fun.apply.for.loss,
liczba.iteracji = dane.liczba.iteracji)
dane.part.A.abstract
dane.liczba.rehedg <- c(1, 4, 10, 140)
dane.liczba.iteracji <- 20
dane.part.A.abstract <- sapply(dane.liczba.rehedg,
fun.apply.for.loss,
liczba.iteracji = dane.liczba.iteracji)
dane.part.A.abstract
fun.apply.for.loss <- function(liczba.iteracji, liczba.rehedg) {
re <- sapply(rep(1,liczba.iteracji),
fun.eval.loss.abstract,
s = dane.s0.WIG20,
strike = 2800,
r = param.r,
mean = dane.mean.WIG20,
sd = dane.sd.WIG20,
T = param.T,
liczba.rehedg = liczba.rehedg)
#colnames(re) <- as.strings(liczba.rehedg)
}
dane.liczba.rehedg <- c(1, 4, 10, 140)
dane.liczba.iteracji <- 20
dane.part.A.abstract <- sapply(dane.liczba.rehedg,
fun.apply.for.loss,
liczba.iteracji = dane.liczba.iteracji)
dane.part.A.abstract
mean(dane.part.A.abstract)
dane.part.A.abstract[,1]
mean(dane.part.A.abstract[,1])
dane.liczba.rehedg <- c(1, 4, 10)
dane.liczba.iteracji <- 1000
dane.part.A.abstract <- sapply(dane.liczba.rehedg,
fun.apply.for.loss,
liczba.iteracji = dane.liczba.iteracji)
mean(dane.part.A.abstract[,1])
mean(dane.part.A.abstract[,2])
mean(dane.part.A.abstract[,3])
dane.liczba.rehedg <- c(1, 4, 30)
dane.liczba.iteracji <- 6000
dane.part.A.abstract <- sapply(dane.liczba.rehedg,
fun.apply.for.loss,
liczba.iteracji = dane.liczba.iteracji)
mean(dane.part.A.abstract[,1])
mean(dane.part.A.abstract[,2])
mean(dane.part.A.abstract[,3])
fun.apply.for.loss <- function(liczba.iteracji, liczba.rehedg) {
re <- sapply(rep(1,liczba.iteracji),
fun.eval.loss.abstract,
s = dane.s0.WIG20,
strike = 2300,
r = param.r,
mean = dane.mean.WIG20,
sd = dane.sd.WIG20,
T = param.T,
liczba.rehedg = liczba.rehedg)
#colnames(re) <- as.strings(liczba.rehedg)
}
dane.liczba.rehedg <- c(1, 4, 30)
dane.liczba.iteracji <- 6000
dane.part.A.abstract <- sapply(dane.liczba.rehedg,
fun.apply.for.loss,
liczba.iteracji = dane.liczba.iteracji)
mean(dane.part.A.abstract[,1])
mean(dane.part.A.abstract[,2])
mean(dane.part.A.abstract[,3])
rysuj.histogram(dane = dane.part.A.abstract[,1])
rysuj.histogram(dane = dane.part.A.abstract[,2])
rysuj.kwantyle.straty(dane.part.A.abstract, circle.alpha = .01, circle.size = 7)
fun.eval.loss.reality <- function(s, strike, r, sd, T, liczba.rehedg, przyszle.dane, numer.wiersza) {
option <- fun.eval.option(s, r, T, 0, sd, strike)
delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, 0))
norisk <- option-s*delta
portfel <- data.frame(s = s,delta = delta0, norisk = norisk, value = option)
skok <- T/(liczba.rehedg+1)
for(i in 1:(liczba.rehedg)){
s <- przyszle.dane[floor((numer.wiersza-1)/(liczba.rehedg+1)*(i+2))]
value <- delta*s + norisk*exp(r*skok)
new.delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, i*skok))
norisk <- norisk*exp(r*skok) - (new.delta-delta)*s
delta <- new.delta
portfel <- rbind(portfel, c(s, delta, norisk, value))
}
s <- przyszle.dane[numer.wiersza]
value <- -(delta*s + norisk*exp(r*skok) - (s-strike))
portfel <- rbind(portfel, c(s, 0, 0, value))
return(portfel)
}
dane.part.A.reality <- sapply(c(4,10),
fun.eval.loss.reality,
s = dane.s0.WIG20,
strike = 3000,
r = param.r,
sd = dane.sd.WIG20,
T = param.T,
przyszle.dane = dane.przyszle.WIG20[,5],
numer.wiersza = 153)
dane.part.A.reality[,1]
dane.part.A.reality
dane.part.A.reality[,1]
dane.part.A.reality <- lapply(c(4,10),
fun.eval.loss.reality,
s = dane.s0.WIG20,
strike = 3000,
r = param.r,
sd = dane.sd.WIG20,
T = param.T,
przyszle.dane = dane.przyszle.WIG20[,5],
numer.wiersza = 153)
dane.part.A.reality
dane.part.A.reality[,1]
dane.part.A.reality[1]
value <- delta*s + norisk*exp(r*skok) - (s-strike)
portfel <- rbind(portfel, c(s, 0, 0, value))
fun.eval.loss.abstract <- function(s, strike, r, mean, sd, T, liczba.rehedg, pusta.zmienna) {
option <- fun.eval.option(s, r, T, 0, sd, strike)
delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, 0))
norisk <- option-s*delta
portfel <- data.frame(s = s,delta = delta0, norisk = norisk)
skok <- T/(liczba.rehedg+1)
for(i in 1:(liczba.rehedg)){
s <- fun.symuluj.1dim.1skok(skok, s, mean, sd, rnorm(1))
new.delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, i*skok))
norisk <- norisk*exp(r*skok) - (new.delta-delta)*s
delta <- new.delta
portfel <- rbind(portfel, c(s, delta, norisk))
}
s <- fun.symuluj.1dim.1skok(skok, s, mean, sd, rnorm(1))
strata <- delta*s + norisk*exp(r*skok) - (s-strike)
return (strata)
}
fun.eval.loss.reality <- function(s, strike, r, sd, T, liczba.rehedg, przyszle.dane, numer.wiersza) {
option <- fun.eval.option(s, r, T, 0, sd, strike)
delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, 0))
norisk <- option-s*delta
portfel <- data.frame(s = s,delta = delta0, norisk = norisk, value = option)
skok <- T/(liczba.rehedg+1)
for(i in 1:(liczba.rehedg)){
s <- przyszle.dane[floor((numer.wiersza-1)/(liczba.rehedg+1)*(i+2))]
value <- delta*s + norisk*exp(r*skok)
new.delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, i*skok))
norisk <- norisk*exp(r*skok) - (new.delta-delta)*s
delta <- new.delta
portfel <- rbind(portfel, c(s, delta, norisk, value))
}
s <- przyszle.dane[numer.wiersza]
value <- delta*s + norisk*exp(r*skok) - (s-strike)
portfel <- rbind(portfel, c(s, 0, 0, value))
return(portfel)
}
#############################################################################################
dane.part.A.reality <- lapply(c(4,10),
fun.eval.loss.reality,
s = dane.s0.WIG20,
strike = 3000,
r = param.r,
sd = dane.sd.WIG20,
T = param.T,
przyszle.dane = dane.przyszle.WIG20[,5],
numer.wiersza = 153)
dane.part.A.reality[1]
fun.eval.loss.abstract <- function(s, strike, r, mean, sd, T, liczba.rehedg, pusta.zmienna) {
option <- fun.eval.option(s, r, T, 0, sd, strike)
delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, 0))
norisk <- option-s*delta
portfel <- data.frame(s = s,delta = delta0, norisk = norisk)
skok <- T/(liczba.rehedg+1)
for(i in 1:(liczba.rehedg)){
s <- fun.symuluj.1dim.1skok(skok, s, mean, sd, rnorm(1))
new.delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, i*skok))
norisk <- norisk*exp(r*skok) - (new.delta-delta)*s
delta <- new.delta
portfel <- rbind(portfel, c(s, delta, norisk))
}
s <- fun.symuluj.1dim.1skok(skok, s, mean, sd, rnorm(1))
strata <- delta*s + norisk*exp(r*skok) - max((s-strike),0)
return (strata)
}
fun.eval.loss.reality <- function(s, strike, r, sd, T, liczba.rehedg, przyszle.dane, numer.wiersza) {
option <- fun.eval.option(s, r, T, 0, sd, strike)
delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, 0))
norisk <- option-s*delta
portfel <- data.frame(s = s,delta = delta0, norisk = norisk, value = option)
skok <- T/(liczba.rehedg+1)
for(i in 1:(liczba.rehedg)){
s <- przyszle.dane[floor((numer.wiersza-1)/(liczba.rehedg+1)*(i+2))]
value <- delta*s + norisk*exp(r*skok)
new.delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, i*skok))
norisk <- norisk*exp(r*skok) - (new.delta-delta)*s
delta <- new.delta
portfel <- rbind(portfel, c(s, delta, norisk, value))
}
s <- przyszle.dane[numer.wiersza]
value <- delta*s + norisk*exp(r*skok) - max((s-strike),0)
portfel <- rbind(portfel, c(s, 0, 0, value))
return(portfel)
}
dane.part.A.reality <- lapply(c(4,10),
fun.eval.loss.reality,
s = dane.s0.WIG20,
strike = 3000,
r = param.r,
sd = dane.sd.WIG20,
T = param.T,
przyszle.dane = dane.przyszle.WIG20[,5],
numer.wiersza = 153)
dane.part.A.reality[1]
dane.liczba.rehedg <- c(1, 4, 30)
dane.liczba.iteracji <- 6000
dane.part.A.abstract <- sapply(dane.liczba.rehedg,
fun.apply.for.loss,
liczba.iteracji = dane.liczba.iteracji)
mean(dane.part.A.abstract[,1])
mean(dane.part.A.abstract[,2])
mean(dane.part.A.abstract[,3])
rysuj.kwantyle.straty(dane.part.A.abstract, circle.alpha = .01, circle.size = 7)
fun.eval.loss.abstract <- function(s0, strike, r, mean, sd, T, liczba.rehedg, pusta.zmienna) {
s <- s0
option <- fun.eval.option(s, r, T, 0, sd, strike)
delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, 0))
norisk <- option-s*delta
portfel <- data.frame(s = s,delta = delta0, norisk = norisk)
skok <- T/(liczba.rehedg+1)
for(i in 1:(liczba.rehedg)){
s <- fun.symuluj.1dim.1skok(skok, s, mean, sd, rnorm(1))
new.delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, i*skok))
norisk <- norisk*exp(r*skok) - (new.delta-delta)*s
delta <- new.delta
portfel <- rbind(portfel, c(s, delta, norisk))
}
s <- fun.symuluj.1dim.1skok(skok, s, mean, sd, rnorm(1))
strata <- delta*s + norisk*exp(r*skok) - max((s-strike),0) - s0
return (strata)
}
fun.eval.loss.reality <- function(s0, strike, r, sd, T, liczba.rehedg, przyszle.dane, numer.wiersza) {
s <- s0
option <- fun.eval.option(s, r, T, 0, sd, strike)
delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, 0))
norisk <- option-s*delta
portfel <- data.frame(s = s,delta = delta0, norisk = norisk, value = option)
skok <- T/(liczba.rehedg+1)
for(i in 1:(liczba.rehedg)){
s <- przyszle.dane[floor((numer.wiersza-1)/(liczba.rehedg+1)*(i+2))]
value <- delta*s + norisk*exp(r*skok)
new.delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, i*skok))
norisk <- norisk*exp(r*skok) - (new.delta-delta)*s
delta <- new.delta
portfel <- rbind(portfel, c(s, delta, norisk, value))
}
s <- przyszle.dane[numer.wiersza]
value <- delta*s + norisk*exp(r*skok) - max((s-strike),0)
portfel <- rbind(portfel, c(s, 0, 0, value))
return(portfel)
}
fun.apply.for.loss <- function(liczba.iteracji, liczba.rehedg) {
re <- sapply(rep(1,liczba.iteracji),
fun.eval.loss.abstract,
s0 = dane.s0.WIG20,
strike = 2300,
r = param.r,
mean = dane.mean.WIG20,
sd = dane.sd.WIG20,
T = param.T,
liczba.rehedg = liczba.rehedg)
#colnames(re) <- as.strings(liczba.rehedg)
}
dane.liczba.rehedg <- c(1, 4, 12)
dane.liczba.iteracji <- 1000
dane.part.A.abstract <- sapply(dane.liczba.rehedg,
fun.apply.for.loss,
liczba.iteracji = dane.liczba.iteracji)
mean(dane.part.A.abstract[,1])
mean(dane.part.A.abstract[,2])
mean(dane.part.A.abstract[,3])
dane.part.A.abstract[,1]
fun.eval.loss.abstract <- function(s, strike, r, mean, sd, T, liczba.rehedg, pusta.zmienna) {
option <- fun.eval.option(s, r, T, 0, sd, strike)
delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, 0))
norisk <- option-s*delta
portfel <- data.frame(s = s,delta = delta0, norisk = norisk)
skok <- T/(liczba.rehedg+1)
for(i in 1:(liczba.rehedg)){
s <- fun.symuluj.1dim.1skok(skok, s, mean, sd, rnorm(1))
new.delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, i*skok))
norisk <- norisk*exp(r*skok) - (new.delta-delta)*s
delta <- new.delta
portfel <- rbind(portfel, c(s, delta, norisk))
}
s <- fun.symuluj.1dim.1skok(skok, s, mean, sd, rnorm(1))
strata <- delta*s + norisk*exp(r*skok) - max((s-strike),0) - option
return (strata)
}
fun.eval.loss.reality <- function(s, strike, r, sd, T, liczba.rehedg, przyszle.dane, numer.wiersza) {
option <- fun.eval.option(s, r, T, 0, sd, strike)
delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, 0))
norisk <- option-s*delta
portfel <- data.frame(s = s,delta = delta0, norisk = norisk, value = option)
skok <- T/(liczba.rehedg+1)
for(i in 1:(liczba.rehedg)){
s <- przyszle.dane[floor((numer.wiersza-1)/(liczba.rehedg+1)*(i+2))]
value <- delta*s + norisk*exp(r*skok)
new.delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, i*skok))
norisk <- norisk*exp(r*skok) - (new.delta-delta)*s
delta <- new.delta
portfel <- rbind(portfel, c(s, delta, norisk, value))
}
s <- przyszle.dane[numer.wiersza]
value <- delta*s + norisk*exp(r*skok) - max((s-strike),0)
portfel <- rbind(portfel, c(s, 0, 0, value))
return(portfel)
}
dane.liczba.rehedg <- c(1, 4, 12)
dane.liczba.iteracji <- 1000
dane.part.A.abstract <- sapply(dane.liczba.rehedg,
fun.apply.for.loss,
liczba.iteracji = dane.liczba.iteracji)
mean(dane.part.A.abstract[,1])
mean(dane.part.A.abstract[,2])
mean(dane.part.A.abstract[,3])
dane.liczba.rehedg <- c(1, 4, 12)
dane.liczba.iteracji <- 1000
dane.part.A.abstract <- sapply(dane.liczba.rehedg,
fun.apply.for.loss,
liczba.iteracji = dane.liczba.iteracji)
mean(dane.part.A.abstract[,1])
mean(dane.part.A.abstract[,2])
dane.part.A.abstract <- sapply(dane.liczba.rehedg,
fun.apply.for.loss,
liczba.iteracji = dane.liczba.iteracji)
#############################################################################################
# ustawienia
#############################################################################################
source("R\\main.r")
#############################################################################################
# funkcje
#############################################################################################
fun.eval.d1 <- function(s0, strike, r, sd, T, t) {
return ((log(s0/strike) + (r+sd/2)*(T-t))/(sqrt(sd*(T-t))))
}
fun.eval.d2 <- function(s0, strike, r, sd, T, t) {
return ((log(s0/strike) + (r-sd/2)*(T-t))/(sqrt(sd*(T-t))))
}
fun.symuluj.1dim.1skok <- function(t, S_0, mean, sd, rnorm) {
return (S_0*exp((mean -1/2*sd^2)*t + sd*rnorm*t))
}
fun.eval.option <- function(s, r, T, t, sd, strike) {
d1 <- fun.eval.d1(s, strike, r, sd, T, t)
d2 <- fun.eval.d2(s, strike, r, sd, T, t)
return (s*pnorm(d1) - strike*exp(-r*(T-t))*pnorm(d2))
}
fun.eval.loss.abstract <- function(s, strike, r, mean, sd, T, liczba.rehedg, pusta.zmienna) {
option <- fun.eval.option(s, r, T, 0, sd, strike)
delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, 0))
norisk <- option-s*delta
portfel <- data.frame(s = s,delta = delta0, norisk = norisk)
skok <- T/(liczba.rehedg+1)
for(i in 1:(liczba.rehedg)){
s <- fun.symuluj.1dim.1skok(skok, s, mean, sd, rnorm(1))
new.delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, i*skok))
norisk <- norisk*exp(r*skok) - (new.delta-delta)*s
delta <- new.delta
portfel <- rbind(portfel, c(s, delta, norisk))
}
s <- fun.symuluj.1dim.1skok(skok, s, mean, sd, rnorm(1))
strata <- delta*s + norisk*exp(r*skok) - max((s-strike),0) - option
return (strata)
}
fun.eval.loss.reality <- function(s, strike, r, sd, T, liczba.rehedg, przyszle.dane, numer.wiersza) {
option <- fun.eval.option(s, r, T, 0, sd, strike)
delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, 0))
norisk <- option-s*delta
portfel <- data.frame(s = s,delta = delta0, norisk = norisk, value = option)
skok <- T/(liczba.rehedg+1)
for(i in 1:(liczba.rehedg)){
s <- przyszle.dane[floor((numer.wiersza-1)/(liczba.rehedg+1)*(i+2))]
value <- delta*s + norisk*exp(r*skok)
new.delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, i*skok))
norisk <- norisk*exp(r*skok) - (new.delta-delta)*s
delta <- new.delta
portfel <- rbind(portfel, c(s, delta, norisk, value))
}
s <- przyszle.dane[numer.wiersza]
value <- delta*s + norisk*exp(r*skok) - max((s-strike),0)
portfel <- rbind(portfel, c(s, 0, 0, value))
return(portfel)
}
#############################################################################################
# czesc abstrakcyjna
#############################################################################################
fun.apply.for.loss <- function(liczba.iteracji, liczba.rehedg) {
re <- sapply(rep(1,liczba.iteracji),
fun.eval.loss.abstract,
s = dane.s0.WIG20,
strike = 2300,
r = param.r,
mean = dane.mean.WIG20,
sd = dane.sd.WIG20,
T = param.T,
liczba.rehedg = liczba.rehedg)
#colnames(re) <- as.strings(liczba.rehedg)
}
dane.liczba.rehedg <- c(1, 4, 12)
dane.liczba.iteracji <- 1000
dane.part.A.abstract <- sapply(dane.liczba.rehedg,
fun.apply.for.loss,
liczba.iteracji = dane.liczba.iteracji)
mean(dane.part.A.abstract[,1])
mean(dane.part.A.abstract[,2])
mean(dane.part.A.abstract[,3])
rysuj.kwantyle.straty(dane.part.A.abstract, circle.alpha = .01, circle.size = 7)
rysuj.histogram(dane = dane.part.A.abstract[,2])
dane.part.A.abstract[,2]
rysuj.histogram <- function(dane, kolor.niski = "#D0E0EB", kolor.wysoki = "#88ABC2", kolor.sigma = "red", szerokosc.faktyczne = 0.01, nazwa = "wykres")
{
mi <- mean(dane)
sigma <- sd(dane)
wykres <- ggplot(data.frame(ax = dane), aes(x = ax)) +
xlab("strata") +
ylab("liczba") +
ggtitle(nazwa) +
geom_rect(aes_string(xmin = mi - sigma, xmax = mi + sigma, ymin = 0, ymax = Inf), fill = kolor.sigma, alpha = .005) + #odchylenie
geom_rect(aes_string(xmin = mi-(sigma/30) , xmax = mi+(sigma/30), ymin = 0, ymax = Inf), fill = kolor.sigma, alpha = .05) + #srednia
geom_histogram(binwidth = 10, aes(fill = ..count..)) + #histogram
scale_fill_gradient("", low = kolor.niski, high = kolor.wysoki) +
theme(legend.position = "none")
return( wykres )
}
rysuj.histogram(dane = dane.part.A.abstract[,2])
rysuj.histogram <- function(dane, kolor.niski = "#D0E0EB", kolor.wysoki = "#88ABC2", kolor.sigma = "red", szerokosc.faktyczne = 0.01, nazwa = "wykres")
{
mi <- mean(dane)
sigma <- sd(dane)
wykres <- ggplot(data.frame(ax = dane), aes(x = ax)) +
xlab("strata") +
ylab("liczba") +
ggtitle(nazwa) +
geom_rect(aes_string(xmin = mi - sigma, xmax = mi + sigma, ymin = 0, ymax = Inf), fill = kolor.sigma, alpha = .005) + #odchylenie
geom_rect(aes_string(xmin = mi-(sigma/30) , xmax = mi+(sigma/30), ymin = 0, ymax = Inf), fill = kolor.sigma, alpha = .05) + #srednia
geom_histogram(binwidth = 5, aes(fill = ..count..)) + #histogram
scale_fill_gradient("", low = kolor.niski, high = kolor.wysoki) +
theme(legend.position = "none")
return( wykres )
}
rysuj.histogram(dane = dane.part.A.abstract[,2])
fun.eval.loss.abstract <- function(s, strike, r, mean, sd, T, liczba.rehedg, pusta.zmienna) {
option <- fun.eval.option(s, r, T, 0, sd, strike)
delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, 0))
norisk <- option-s*delta
portfel <- data.frame(s = s,delta = delta0, norisk = norisk)
skok <- T/(liczba.rehedg+1)
for(i in 1:(liczba.rehedg)){
s <- fun.symuluj.1dim.1skok(skok, s, mean, sd, rnorm(1))
new.delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, i*skok))
norisk <- norisk*exp(r*skok) - (new.delta-delta)*s
delta <- new.delta
portfel <- rbind(portfel, c(s, delta, norisk))
}
s <- fun.symuluj.1dim.1skok(skok, s, mean, sd, rnorm(1))
strata <- (delta*s + norisk*exp(r*skok) - max((s-strike),0) - option)/option
return (strata)
}
dane.part.A.abstract <- sapply(dane.liczba.rehedg,
fun.apply.for.loss,
liczba.iteracji = dane.liczba.iteracji)
mean(dane.part.A.abstract[,1])
mean(dane.part.A.abstract[,2])
mean(dane.part.A.abstract[,3])
fun.eval.loss.abstract <- function(s, strike, r, mean, sd, T, liczba.rehedg, pusta.zmienna) {
option <- fun.eval.option(s, r, T, 0, sd, strike)
delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, 0))
norisk <- option-s*delta
portfel <- data.frame(s = s,delta = delta0, norisk = norisk)
skok <- T/(liczba.rehedg+1)
for(i in 1:(liczba.rehedg)){
s <- fun.symuluj.1dim.1skok(skok, s, mean, sd, rnorm(1))
new.delta <- pnorm(fun.eval.d1(s, strike, r, sd, T, i*skok))
norisk <- norisk*exp(r*skok) - (new.delta-delta)*s
delta <- new.delta
portfel <- rbind(portfel, c(s, delta, norisk))
}
s <- fun.symuluj.1dim.1skok(skok, s, mean, sd, rnorm(1))
strata <- (delta*s + norisk*exp(r*skok) - max((s-strike),0))/option
return (strata)
}
dane.part.A.abstract <- sapply(dane.liczba.rehedg,
fun.apply.for.loss,
liczba.iteracji = dane.liczba.iteracji)
mean(dane.part.A.abstract[,1])
mean(dane.part.A.abstract[,2])
mean(dane.part.A.abstract[,3])
